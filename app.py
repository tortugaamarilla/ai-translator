import streamlit as st
import os
from openai import OpenAI
from anthropic import Anthropic
import requests
import json
import base64
from PIL import Image
import io
import time
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit)
st.set_page_config(
    page_title="AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ | –ò—Å–ø–∞–Ω—Å–∫–∏–π ‚ü∑ –†—É—Å—Å–∫–∏–π",
    page_icon="üåê",
    layout="centered",
    initial_sidebar_state="auto"
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if 'https_proxy' in os.environ:
    del os.environ['https_proxy']

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
successful_claude_model = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'api_key_anthropic' not in st.session_state:
    st.session_state.api_key_anthropic = os.getenv('ANTHROPIC_API_KEY', '')

if 'api_key_openai' not in st.session_state:
    st.session_state.api_key_openai = os.getenv('OPENAI_API_KEY', '')

if 'api_key_elevenlabs' not in st.session_state:
    st.session_state.api_key_elevenlabs = os.getenv('ELEVENLABS_API_KEY', '')

if 'voice_id' not in st.session_state:
    st.session_state.voice_id = "2Lb1en5ujrODDIqmp7F3"  # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if 'ai_model' not in st.session_state:
    st.session_state.ai_model = "Claude 3.7 Sonnet"

if 'use_last_successful_model' not in st.session_state:
    st.session_state.use_last_successful_model = True

if 'current_screen' not in st.session_state:
    st.session_state.current_screen = "es_to_ru"

if 'system_prompts' not in st.session_state:
    st.session_state.system_prompts = {
        "es_to_ru": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ç–æ—á–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ü–µ—Ä–µ–≤–æ–¥–∏ –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –¥–∞–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
2. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è.
3. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
4. –î–ª—è —Å–ª–æ–≤ "hola", "buenos d√≠as", "buenas tardes", –∏ "buenas noches" –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ "–ø—Ä–∏–≤–µ—Ç", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å" –∏ "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä".
5. –ü–µ—Ä–µ–≤–æ–¥–∏ "ustedes" –∫–∞–∫ "–≤—ã" (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ), –∞ "t√∫" –∫–∞–∫ "—Ç—ã" (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ).
6. –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º, –≥—Ä–∞–º–æ—Ç–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
7. –¢–ï–ö–°–¢ –ü–ï–†–ï–í–û–î–ê –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–¢–û–†–´–ú –û–¢–í–ï–¢–û–ú. –ù–ò–ö–ê–ö–ò–• –î–†–£–ì–ò–• –°–õ–û–í, –ö–†–û–ú–ï –°–ê–ú–û–ì–û –ü–ï–†–ï–í–û–î–ê.""",

        "ru_to_es": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ç–æ—á–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í–°–ï–ì–î–ê –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–±–µ —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å.
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏ –∏—Ö –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π.
3. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥.
4. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
5. –î–ª—è —Å–ª–æ–≤ "–ø—Ä–∏–≤–µ—Ç", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å" –∏ "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä" –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ "hola", "buenos d√≠as", "buenas tardes" –∏ "buenas noches".
6. –ü–µ—Ä–µ–≤–æ–¥–∏ "–≤—ã" (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) –∫–∞–∫ "ustedes", –∞ "—Ç—ã" (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ) –∫–∞–∫ "t√∫".
7. –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º, –≥—Ä–∞–º–æ—Ç–Ω–æ–º –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ.
8. –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–∞–≤–∞–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–µ—Ä–µ–≤–æ–¥—É.
9. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—à—å "–∫–∞–∫ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –î–∏–ø–ª–æ–º?", —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å "¬øc√≥mo se llama correctamente el Diploma en espa√±ol?" - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥, –∞ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.""",

        "photo_translation": """–¢—ã - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –°–Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –≤–∏–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º).
2. –ó–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
3. –ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –µ—Å—Ç—å –º–µ–Ω—é, –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–≤–µ–¥–∏ –∏—Ö.
4. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
5. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ—á–µ—Ç–∫–∏–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π, —É–∫–∞–∂–∏ —ç—Ç–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.
6. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    }

# –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
st.markdown("""
<style>
    .stApp {
        max-width: 100%;
    }
    .stTextInput, .stTextArea {
        width: 100%;
    }
    .stButton button {
        width: 100%;
    }
    @media (max-width: 640px) {
        .main .block-container {
            padding-left: 1rem;
            padding-right: 1rem;
            padding-top: 1rem;
        }
    }
    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ header */
    .header-button {
        margin-right: 10px;
        border: none;
        padding: 8px 16px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
    }
    /* –°—Ç–∏–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ */
    .translation-result {
        background-color: #f0f2f6;
        padding: 15px;
        border-radius: 5px;
        margin-top: 15px;
        margin-bottom: 15px;
    }
    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π */
    .action-button {
        margin-right: 5px;
    }
</style>

<script>
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyTextToClipboard(text) {
    if (navigator.clipboard && window.isSecureContext) {
        // –î–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        navigator.clipboard.writeText(text).then(() => {
            console.log('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', err);
        });
    } else {
        // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            console.log('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (fallback)');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', err);
        }
        
        document.body.removeChild(textArea);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
async function pasteFromClipboard(targetId) {
    try {
        const text = await navigator.clipboard.readText();
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
            targetElement.value = text;
            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ streamlit
            const event = new Event('input', { bubbles: true });
            targetElement.dispatchEvent(event);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:', err);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.body.addEventListener('click', function(event) {
        const target = event.target;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –∫–Ω–æ–ø–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if (target.closest('button') && target.textContent.includes('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å')) {
            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –±–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞
            const resultBlock = target.closest('div').previousElementSibling.querySelector('.translation-result');
            if (resultBlock) {
                copyTextToClipboard(resultBlock.textContent);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –∫–Ω–æ–ø–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏
        if (target.closest('button') && target.textContent.includes('üìã') && !target.textContent.includes('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å')) {
            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            const textArea = target.closest('div').previousElementSibling.querySelector('textarea');
            if (textArea) {
                pasteFromClipboard(textArea.id);
            }
        }
    });
});
</script>
""", unsafe_allow_html=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'OPENAI_API_KEY' in st.secrets:
        st.session_state.api_key_openai = st.secrets["OPENAI_API_KEY"]
    if 'ANTHROPIC_API_KEY' in st.secrets:
        st.session_state.api_key_anthropic = st.secrets["ANTHROPIC_API_KEY"]
    if 'ELEVENLABS_API_KEY' in st.secrets:
        st.session_state.api_key_elevenlabs = st.secrets["ELEVENLABS_API_KEY"]
except Exception as e:
    # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –°–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è API
def get_openai_client():
    api_key = st.session_state.api_key_openai
    if not api_key:
        st.error("API –∫–ª—é—á OpenAI –Ω–µ –∑–∞–¥–∞–Ω")
        return None
    return OpenAI(api_key=api_key)

# –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API Anthropic –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
def call_anthropic_api_directly(text, system_prompt, model_name=None):
    global successful_claude_model
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞ –∏ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if st.session_state.get('use_last_successful_model', False) and st.session_state.get('last_successful_model'):
        models_to_try = [st.session_state.get('last_successful_model')]
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å: {models_to_try[0]}")
    else:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
        models_to_try = [
            "claude-3-7-sonnet-20250219",  # –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            "claude-3-sonnet-20240229",
            "claude-3-haiku-20240307",
            "claude-3-opus-20240229"
        ]
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, –ø—Ä–æ–±—É–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
        if model_name:
            if model_name not in models_to_try:
                models_to_try.insert(0, model_name)
            else:
                # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                models_to_try.remove(model_name)
                models_to_try.insert(0, model_name)
    
    api_key = st.session_state.api_key_anthropic
    
    if not api_key:
        return {"error": "API –∫–ª—é—á Anthropic –Ω–µ –∑–∞–¥–∞–Ω", "response": None, "model": None}
    
    headers = {
        "x-api-key": api_key,
        "anthropic-version": "2023-06-01",
        "content-type": "application/json"
    }
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debug_info = {
        "system_prompt": system_prompt,
        "user_text": text
    }
    
    for model in models_to_try:
        try:
            debug_info["model"] = model
            
            payload = {
                "model": model,
                "max_tokens": 1024,
                "temperature": 0,
                "system": system_prompt,
                "messages": [
                    {
                        "role": "user",
                        "content": text
                    }
                ]
            }
            
            debug_info["payload"] = payload
            
            response = requests.post(
                "https://api.anthropic.com/v1/messages",
                headers=headers,
                json=payload
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å
                successful_claude_model = model
                st.session_state['last_successful_model'] = model
                
                return {
                    "response": result["content"][0]["text"],
                    "error": None,
                    "model": model,
                    "debug_info": debug_info
                }
            else:
                error_info = f"–û—à–∏–±–∫–∞ API ({response.status_code}): {response.text}"
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model}: {error_info}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
        except Exception as e:
            error_info = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model}: {error_info}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    return {
        "response": None,
        "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.",
        "model": None,
        "debug_info": debug_info
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ API
def process_image(image, context=""):
    if image is None:
        return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", None
    
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        buffer = io.BytesIO()
        image.save(buffer, format="PNG")
        image_bytes = buffer.getvalue()
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        message_content = [
            {
                "type": "image",
                "source": {
                    "type": "base64",
                    "media_type": "image/png",
                    "data": base64_image
                }
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        if context and context.strip():
            message_content.append({
                "type": "text",
                "text": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {context}"
            })
            
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = {
            "system_prompt": st.session_state.system_prompts["photo_translation"],
            "has_context": bool(context and context.strip())
        }
        
        # –í—ã–∑—ã–≤–∞–µ–º API
        result = call_anthropic_api_directly(
            text=message_content,
            system_prompt=st.session_state.system_prompts["photo_translation"]
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if result.get("error"):
            debug_info["error"] = result["error"]
            return f"–û—à–∏–±–∫–∞ API: {result['error']}", debug_info
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        translated_text = result["response"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info["model_used"] = result["model"]
        
        return translated_text, debug_info
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        return error_msg, {"error": error_msg}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ AI
def translate_text(text, from_lang, to_lang):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    if not text or text.strip() == "":
        return "", None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    debug_info = {}

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    if from_lang == 'es' and to_lang == 'ru':
        system_prompt = st.session_state.system_prompts["es_to_ru"]
        direction_key = 'es_to_ru'
    elif from_lang == 'ru' and to_lang == 'es':
        system_prompt = st.session_state.system_prompts["ru_to_es"]
        direction_key = 'ru_to_es'
    else:
        return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {from_lang} -> {to_lang}", None

    debug_info["direction"] = direction_key
    debug_info["system_prompt"] = system_prompt
    debug_info["input_text"] = text
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    # –ó–∞–∫–ª—é—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∏ –∏ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    formatted_text = f'–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç (–∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–π –≤ –∫–∞–≤—ã—á–∫–∏): "{text.strip()}"'
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    if st.session_state.ai_model == "Claude 3.7 Sonnet":
        try:
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API Anthropic
            result = call_anthropic_api_directly(formatted_text, system_prompt)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if result.get("error"):
                debug_info["error"] = result["error"]
                return f"–û—à–∏–±–∫–∞ API: {result['error']}", debug_info
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            translated_text = result["response"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debug_info["model_used"] = result["model"]
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∏–º–∏
            if translated_text and translated_text.startswith('"') and translated_text.endswith('"'):
                translated_text = translated_text[1:-1]
                
            return translated_text, debug_info
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}"
            debug_info["error"] = error_msg
            return error_msg, debug_info
            
    # –î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
    else:
        return f"–ú–æ–¥–µ–ª—å {st.session_state.ai_model} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", debug_info

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Elevenlabs —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API-–∑–∞–ø—Ä–æ—Å
def text_to_speech(text):
    if not text:
        st.warning("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è")
        return
    
    api_key = st.session_state.api_key_elevenlabs
    if not api_key:
        st.error("–î–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á ElevenLabs. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    voice_id = st.session_state.voice_id
    
    try:
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": api_key
        }
        
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.5
            }
        }
        
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ..."):
            response = requests.post(url, json=data, headers=headers)
            
            if response.status_code == 200:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmpfile:
                    tmpfile.write(response.content)
                    audio_path = tmpfile.name
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä
                st.audio(audio_path)
                
                return audio_path
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏: {response.status_code}, {response.text}")
                return None
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def display_header():
    st.title("üåê AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ | –ò—Å–ø–∞–Ω—Å–∫–∏–π ‚ü∑ –†—É—Å—Å–∫–∏–π")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    if successful_claude_model:
        st.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {successful_claude_model}")
    
    # –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üá™üá∏ ‚Üí üá∑üá∫", help="–ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π", use_container_width=True):
            st.session_state.current_screen = "es_to_ru"
            st.rerun()
            
    with col2:
        if st.button("üá∑üá∫ ‚Üí üá™üá∏", help="–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π", use_container_width=True):
            st.session_state.current_screen = "ru_to_es"
            st.rerun()
            
    with col3:
        if st.button("üì∑ –§–æ—Ç–æ", help="–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", use_container_width=True):
            st.session_state.current_screen = "photo"
            st.rerun()
            
    with col4:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", help="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", use_container_width=True):
            st.session_state.current_screen = "settings"
            st.rerun()
            
    st.divider()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def display_es_to_ru():
    st.subheader("üá™üá∏ ‚Üí üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'es_to_ru_text' not in st.session_state:
        st.session_state.es_to_ru_text = ""
    if 'es_to_ru_translation' not in st.session_state:
        st.session_state.es_to_ru_translation = None
    if 'es_to_ru_debug_info' not in st.session_state:
        st.session_state.es_to_ru_debug_info = None
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
    spanish_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º", height=150, key="es_ru_input", 
                              value=st.session_state.es_to_ru_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ session_state
    st.session_state.es_to_ru_text = spanish_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False, key="show_debug_es_ru")
    
    # –®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ API
    system_prompt = st.session_state.system_prompts["es_to_ru"]
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translate_button = st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ üîÑ", key="translate_es_ru")
    
    with col2:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if st.button("–û–∑–≤—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç üîä", key="speak_original_es"):
            text_to_speech(spanish_text)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    if spanish_text and translate_button:
        with st.spinner("–ü–µ—Ä–µ–≤–æ–¥..."):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            translation, debug_info = translate_text(spanish_text, 'es', 'ru')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
            st.session_state.es_to_ru_translation = translation
            st.session_state.es_to_ru_debug_info = debug_info
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ session_state
    if st.session_state.es_to_ru_translation:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:")
        st.markdown(f"**{st.session_state.es_to_ru_translation}**")
        
        # –ú–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if st.session_state.es_to_ru_debug_info and st.session_state.es_to_ru_debug_info.get("model_used"):
            st.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å: {st.session_state.es_to_ru_debug_info['model_used']}")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="copy_es_ru"):
                st.toast("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        with col2:
            if st.button("üîä –û–∑–≤—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="speak_es_ru"):
                text_to_speech(st.session_state.es_to_ru_translation)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if show_debug and st.session_state.es_to_ru_debug_info:
            st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            st.json(st.session_state.es_to_ru_debug_info)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.es_to_ru_translation:
        if st.button("üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", key="new_translation_es_ru"):
            st.session_state.es_to_ru_translation = None
            st.session_state.es_to_ru_debug_info = None
            st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π
def display_ru_to_es():
    st.subheader("üá∑üá∫ ‚Üí üá™üá∏ –ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'ru_to_es_text' not in st.session_state:
        st.session_state.ru_to_es_text = ""
    if 'ru_to_es_translation' not in st.session_state:
        st.session_state.ru_to_es_translation = None
    if 'ru_to_es_debug_info' not in st.session_state:
        st.session_state.ru_to_es_debug_info = None
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    russian_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º", height=150, key="ru_es_input", 
                               value=st.session_state.ru_to_es_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ session_state
    st.session_state.ru_to_es_text = russian_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False, key="show_debug_ru_es")
    
    # –®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ API
    system_prompt = st.session_state.system_prompts["ru_to_es"]
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translate_button = st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ üîÑ", key="translate_ru_es")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    if russian_text and translate_button:
        with st.spinner("–ü–µ—Ä–µ–≤–æ–¥..."):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            translation, debug_info = translate_text(russian_text, 'ru', 'es')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
            st.session_state.ru_to_es_translation = translation
            st.session_state.ru_to_es_debug_info = debug_info
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ session_state
    if st.session_state.ru_to_es_translation:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:")
        st.markdown(f"**{st.session_state.ru_to_es_translation}**")
        
        # –ú–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if st.session_state.ru_to_es_debug_info and st.session_state.ru_to_es_debug_info.get("model_used"):
            st.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å: {st.session_state.ru_to_es_debug_info['model_used']}")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="copy_ru_es"):
                st.toast("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        with col2:
            if st.button("üîä –û–∑–≤—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="speak_ru_es"):
                text_to_speech(st.session_state.ru_to_es_translation)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if show_debug and st.session_state.ru_to_es_debug_info:
            st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            st.json(st.session_state.ru_to_es_debug_info)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.ru_to_es_translation:
        if st.button("üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", key="new_translation_ru_es"):
            st.session_state.ru_to_es_translation = None
            st.session_state.ru_to_es_debug_info = None
            st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞
def display_photo_translation():
    st.subheader("üì∑ –ü–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'photo_context' not in st.session_state:
        st.session_state.photo_context = ""
    if 'photo_translation' not in st.session_state:
        st.session_state.photo_translation = None
    if 'photo_debug_info' not in st.session_state:
        st.session_state.photo_debug_info = None
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å–ø–∞–Ω—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º", type=["png", "jpg", "jpeg"], key="photo_upload")
    
    # –ü–æ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = st.text_area("–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=st.session_state.photo_context, 
                           key="photo_context_input", help="–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤ –ø–µ—Ä–µ–≤–æ–¥–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    st.session_state.photo_context = context
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False, key="show_debug_photo")
    
    if image:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_pil = Image.open(image)
        st.image(image_pil, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
        
        translate_button = st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üîÑ", key="translate_photo")
        
        if translate_button:
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                translation, debug_info = process_image(image_pil, context)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                st.session_state.photo_translation = translation
                st.session_state.photo_debug_info = debug_info
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ session_state
    if st.session_state.photo_translation:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:")
        st.markdown(f"**{st.session_state.photo_translation}**")
        
        # –ú–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if st.session_state.photo_debug_info and st.session_state.photo_debug_info.get("model_used"):
            st.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å: {st.session_state.photo_debug_info['model_used']}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="copy_photo"):
            st.toast("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if show_debug and st.session_state.photo_debug_info:
            st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            st.json(st.session_state.photo_debug_info)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", key="new_translation_photo"):
            st.session_state.photo_translation = None
            st.session_state.photo_debug_info = None
            st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def display_settings():
    global successful_claude_model
    
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI
    st.session_state.ai_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        ["Claude 3.7 Sonnet", "ChatGPT gpt-4o", "ChatGPT o1"],
        index=["Claude 3.7 Sonnet", "ChatGPT gpt-4o", "ChatGPT o1"].index(st.session_state.ai_model)
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ Claude
    if st.session_state.ai_model == "Claude 3.7 Sonnet":
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ Claude")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if successful_claude_model:
            st.success(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å Claude: {successful_claude_model}")
        
        # –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –º–æ–¥–µ–ª–∏
        st.session_state.use_last_successful_model = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å",
            value=st.session_state.get('use_last_successful_model', False)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å
        last_successful = st.session_state.get('last_successful_model', None)
        if last_successful:
            st.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è –º–æ–¥–µ–ª—å: {last_successful}")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"):
            st.session_state['last_successful_model'] = None
            successful_claude_model = None
            st.success("–ö—ç—à –º–æ–¥–µ–ª–∏ –æ—á–∏—â–µ–Ω")
            st.rerun()
    
    # –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞")
    st.session_state.voice_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:",
        [
            "Jhenny Antiques (–∂–µ–Ω—Å–∫–∏–π)", 
            "Benjamin (–º—É–∂—Å–∫–æ–π)"
        ],
        index=0 if st.session_state.voice_id == "2Lb1en5ujrODDIqmp7F3" else 1
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ voice_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
    if st.session_state.voice_id == "Jhenny Antiques (–∂–µ–Ω—Å–∫–∏–π)":
        st.session_state.voice_id = "2Lb1en5ujrODDIqmp7F3"
    elif st.session_state.voice_id == "Benjamin (–º—É–∂—Å–∫–æ–π)":
        st.session_state.voice_id = "LruHrtVF6PSyGItzMNHS"
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    st.subheader("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã")
    
    with st.expander("–ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"):
        st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:", 
            st.session_state.system_prompts["es_to_ru"],
            height=100,
            key="es_to_ru_prompt"
        )
    
    with st.expander("–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π"):
        st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π:", 
            st.session_state.system_prompts["ru_to_es"],
            height=200,
            key="ru_to_es_prompt"
        )
    
    with st.expander("–ü–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞"):
        st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", 
            st.session_state.system_prompts["photo_translation"],
            height=300,
            key="photo_translation_prompt"
        )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"):
        st.session_state.system_prompts["es_to_ru"] = st.session_state.es_to_ru_prompt
        st.session_state.system_prompts["ru_to_es"] = st.session_state.ru_to_es_prompt
        st.session_state.system_prompts["photo_translation"] = st.session_state.photo_translation_prompt
        st.success("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–≤–∞–ª–∞ —Å–∞–π—Ç–∞
def display_footer():
    st.divider()
    st.markdown(
        """
        <div class="footer">
            <p>AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ | –í–µ—Ä—Å–∏—è 1.0.0</p>
        </div>
        """, 
        unsafe_allow_html=True
    )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
    if not st.session_state.api_key_anthropic and st.session_state.ai_model == "Claude 3.7 Sonnet":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ Anthropic
        st.title("AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ | –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API")
        st.warning("API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:")
        
        api_key = st.text_input("API –∫–ª—é—á Anthropic", type="password")
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á"):
            if api_key:
                st.session_state.api_key_anthropic = api_key
                st.success("API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                time.sleep(1)
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞
        with st.expander("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Anthropic"):
            st.markdown("""
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç [Anthropic](https://console.anthropic.com/)
            2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
            3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª API Keys
            4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á
            5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ
            """)
        
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –µ—Å–ª–∏ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    display_header()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    if st.session_state.get('current_screen', 'es_to_ru') == "es_to_ru":
        display_es_to_ru()
    elif st.session_state.get('current_screen', '') == "ru_to_es":
        display_ru_to_es()
    elif st.session_state.get('current_screen', '') == "photo":
        display_photo_translation()
    elif st.session_state.get('current_screen', '') == "settings":
        display_settings()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º footer
    display_footer()

if __name__ == "__main__":
    main() 