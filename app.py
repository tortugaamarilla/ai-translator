import streamlit as st
import os
from openai import OpenAI
from anthropic import Anthropic
import requests
import json
import base64
from PIL import Image
import io
import time
import tempfile
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit)
st.set_page_config(
    page_title="AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ | –ò—Å–ø–∞–Ω—Å–∫–∏–π ‚ü∑ –†—É—Å—Å–∫–∏–π",
    page_icon="üåê",
    layout="centered",
    initial_sidebar_state="auto"
)

# –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –±–µ–∑ —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit
st.markdown('''
<style>
/* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Streamlit –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */
#MainMenu {visibility: hidden !important;}
.stDeployButton {display: none !important;}
[data-testid="stToolbar"] {visibility: hidden !important;}
.viewerBadge_container__1QSob {display: none !important;}

/* –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–≤–µ—Ä—Ö */
.main .block-container {
    padding-top: 0 !important;
    padding-right: 1rem !important;
    padding-left: 1rem !important;
    max-width: 100% !important;
    margin-top: -3rem !important;
}

/* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ */
.stApp > header {
    display: none !important;
}

/* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å–≤–µ—Ä—Ö—É */
.stTextArea, .stTextInput {
    padding-top: 0 !important;
    margin-top: 0 !important;
}

/* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É label —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π */
.stTextArea label, .stTextInput label {
    padding-bottom: 0 !important;
    margin-bottom: 0 !important;
    font-size: 0.8rem !important;
    line-height: 1 !important;
}

/* –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
div[data-testid="stVerticalBlock"] > div {
    padding-top: 0 !important;
    margin-top: 0 !important;
}

/* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
.element-container {
    margin-bottom: 0 !important;
    padding-bottom: 0 !important;
}

/* –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–Ω–∏–º–∞–µ–º –≤–≤–µ—Ä—Ö */
.st-emotion-cache-1y4p8pa {
    padding-top: 0 !important;
    margin-top: -2rem !important;
}

/* –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É —É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
.stApp, 
.main,
.block-container,
.css-1d391kg,
.css-18e3th9,
.css-1wyom9d,
.stApp > div:first-child,
.stApp > div > div:first-child,
.stApp > div > div > div:first-child,
div[data-testid="stAppViewContainer"],
div[data-testid="stAppViewContainer"] > div,
div[data-testid="stAppViewContainer"] > div > div,
div[data-testid="stVerticalBlock"],
div[data-testid="stHorizontalBlock"] {
    padding-top: 0 !important;
    margin-top: 0 !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media only screen and (max-width: 768px) {
    .stTextInput input, .stSelectbox, .stTextArea textarea {
        width: 100% !important;
    }
    .stButton button {
        width: 100% !important;
    }
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ */
.translation-result {
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    padding: 15px;
    margin-top: 15px;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */
.mode-indicator {
    position: fixed;
    top: 0.5rem;
    right: 1rem;
    padding: 0.25rem 0.75rem;
    background-color: #e8ecef;
    border-radius: 4px;
    font-size: 0.9rem;
    z-index: 1000;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫-—Å—Å—ã–ª–æ–∫ */
button[data-testid*="more_variant_"], button[data-testid*="hide_variant_"] {
    background: none !important;
    color: #888 !important;
    border: none !important;
    padding: 0 !important;
    font-size: 0.8rem !important;
    text-decoration: underline !important;
    cursor: pointer !important;
    width: auto !important;
    height: auto !important;
    text-align: right !important;
    float: right !important;
    box-shadow: none !important;
    margin-bottom: 10px !important;
}
button[data-testid*="more_variant_"]:hover, button[data-testid*="hide_variant_"]:hover {
    color: #555 !important;
    background: none !important;
}
/* –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–Ω—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ —Ñ–æ–∫—É—Å–µ */
button[data-testid*="more_variant_"]:focus, button[data-testid*="hide_variant_"]:focus,
button[data-testid*="more_variant_"]:active, button[data-testid*="hide_variant_"]:active {
    box-shadow: none !important;
    outline: none !important;
}
</style>
''', unsafe_allow_html=True)

# –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Toastify –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
st.markdown("""
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
""", unsafe_allow_html=True)

# –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
st.markdown("""
<script>
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
function copyTranslationText(btn) {
    // –î–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    const resultDiv = btn.closest('.row-widget').parentElement.previousElementSibling.querySelector('.translation-result');
    if (resultDiv) {
        const text = resultDiv.innerText || resultDiv.textContent;
        navigator.clipboard.writeText(text)
            .then(() => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                Toastify({
                    text: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
                    duration: 2000,
                    close: false,
                    gravity: "bottom",
                    position: "center",
                    stopOnFocus: true,
                    style: {
                        background: "linear-gradient(to right, #00b09b, #96c93d)",
                    }
                }).showToast();
            })
            .catch(err => {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ", err);
            });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function speakText(text) {
    if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        window.speechSynthesis.speak(utterance);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        Toastify({
            text: "–û–∑–≤—É—á–∏–≤–∞—é —Ç–µ–∫—Å—Ç...",
            duration: 2000,
            close: false,
            gravity: "bottom",
            position: "center",
            stopOnFocus: true,
            style: {
                background: "linear-gradient(to right, #00b09b, #96c93d)",
            }
        }).showToast();
    } else {
        alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function setupCopyButtons() {
    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è 
    const copyButtons = document.querySelectorAll('button:has(div:contains("üìã"))');
    copyButtons.forEach(button => {
        if (!button.hasAttribute('data-copy-listener')) {
            button.setAttribute('data-copy-listener', 'true');
            button.addEventListener('click', function(e) {
                copyTranslationText(this);
            });
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
function setupSpeakButtons() {
    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    const speakButtons = document.querySelectorAll('button:has(div:contains("üîä"))');
    speakButtons.forEach(button => {
        if (!button.hasAttribute('data-speak-listener')) {
            button.setAttribute('data-speak-listener', 'true');
            button.addEventListener('click', function(e) {
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–µ–ø–µ—Ä—å –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π)
                const translationElement = this.closest('.row-widget').parentElement.previousElementSibling.querySelector('.translation-result');
                if (translationElement) {
                    const text = translationElement.textContent.trim();
                    if (text) {
                        speakText(text);
                    }
                }
            });
        }
    });
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        if (mutation.addedNodes.length) {
            setupCopyButtons();
            setupSpeakButtons();
        }
    });
});

// –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
observer.observe(document.body, { childList: true, subtree: true });

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    setupCopyButtons();
    setupSpeakButtons();
});
</script>
""", unsafe_allow_html=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.markdown("""
<script>
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ —Å–≤–µ—Ä—Ö—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —É–¥–∞–ª—è–µ–º —É –Ω–∏—Ö –æ—Ç—Å—Ç—É–ø—ã
    const allElements = document.querySelectorAll('div');
    allElements.forEach(el => {
        const style = window.getComputedStyle(el);
        if (parseInt(style.paddingTop) > 0 || parseInt(style.marginTop) > 0) {
            el.style.paddingTop = '0px';
            el.style.marginTop = '0px';
        }
    });
    
    // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é - –¥–µ–ª–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    const firstTextArea = document.querySelector('.stTextArea');
    if (firstTextArea) {
        firstTextArea.style.marginTop = '-1rem';
    }
});
</script>
""", unsafe_allow_html=True)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if 'https_proxy' in os.environ:
    del os.environ['https_proxy']

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
def load_prompt_from_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return file.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞ {filename}: {e}")
        return None

def save_prompt_to_file(filename, content):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            file.write(content)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ {filename}: {e}")
        return False

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–º–ø—Ç–æ–≤
PROMPT_FILES = {
    "es_to_ru": "sys_prompt_es_to_ru.txt",
    "es_to_ru_extra": "sys_prompt_es_to_ru_extra.txt",
    "ru_to_es": "sys_prompt_ru_to_es.txt",
    "ru_to_es_one_option": "sys_prompt_ru_to_es_one_option.txt",
    "ru_to_es_several_options": "sys_prompt_ru_to_es_several_options.txt",
    "photo_translation": "sys_prompt_photo_translation.txt"
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
successful_claude_model = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'api_key_anthropic' not in st.session_state:
    st.session_state.api_key_anthropic = os.getenv('ANTHROPIC_API_KEY', '')

if 'api_key_openai' not in st.session_state:
    st.session_state.api_key_openai = os.getenv('OPENAI_API_KEY', '')

if 'api_key_elevenlabs' not in st.session_state:
    st.session_state.api_key_elevenlabs = os.getenv('ELEVENLABS_API_KEY', '')

if 'voice_id' not in st.session_state:
    st.session_state.voice_id = "2Lb1en5ujrODDIqmp7F3"  # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if 'ai_model' not in st.session_state:
    st.session_state.ai_model = "Claude 3.7 Sonnet"

if 'use_last_successful_model' not in st.session_state:
    st.session_state.use_last_successful_model = True

if 'current_screen' not in st.session_state:
    st.session_state.current_screen = "es_to_ru"

if 'use_multiple_variants' not in st.session_state:
    st.session_state.use_multiple_variants = True

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
if 'system_prompts' not in st.session_state:
    st.session_state.system_prompts = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
    for key, filename in PROMPT_FILES.items():
        prompt_text = load_prompt_from_file(filename)
        if prompt_text:
            st.session_state.system_prompts[key] = prompt_text
        else:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ {filename}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞.")
            
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è ru_to_es –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if st.session_state.use_multiple_variants and "ru_to_es_several_options" in st.session_state.system_prompts:
        st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_several_options"]
    elif "ru_to_es_one_option" in st.session_state.system_prompts:
        st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_one_option"]

# –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
st.markdown("""
<style>
    .stApp {
        max-width: 100%;
    }
    .stTextInput, .stTextArea {
        width: 100%;
    }
    .stButton button {
        width: 100%;
    }
    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ header */
    .header-button {
        margin-right: 10px;
        border: none;
        padding: 8px 16px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
    }
    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π */
    .action-button {
        margin-right: 5px;
    }
</style>
""", unsafe_allow_html=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'OPENAI_API_KEY' in st.secrets:
        st.session_state.api_key_openai = st.secrets["OPENAI_API_KEY"]
    if 'ANTHROPIC_API_KEY' in st.secrets:
        st.session_state.api_key_anthropic = st.secrets["ANTHROPIC_API_KEY"]
    if 'ELEVENLABS_API_KEY' in st.secrets:
        st.session_state.api_key_elevenlabs = st.secrets["ELEVENLABS_API_KEY"]
except Exception as e:
    # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –°–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è API
def get_openai_client():
    api_key = st.session_state.api_key_openai
    if not api_key:
        st.error("API –∫–ª—é—á OpenAI –Ω–µ –∑–∞–¥–∞–Ω")
        return None
    return OpenAI(api_key=api_key)

# –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API Anthropic –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
def call_anthropic_api_directly(text, system_prompt, model_name=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Anthropic Claude —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.
    
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç:
    1. –†–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ Claude –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    2. –õ–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ 529 (Overloaded)
    3. –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Parameters:
        text (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        system_prompt (str): –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        model_name (str, optional): –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Claude –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. 
                                    –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏:
            - response: –û—Ç–≤–µ—Ç –æ—Ç API (str –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏)
            - error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (str –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞)
            - model: –ò–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (str –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏)
            - debug_info: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (dict)
    """
    global successful_claude_model
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞ –∏ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if st.session_state.get('use_last_successful_model', False) and st.session_state.get('last_successful_model'):
        models_to_try = [st.session_state.get('last_successful_model')]
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å: {models_to_try[0]}")
    else:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
        models_to_try = [
            "claude-3-7-sonnet-20250219",  # –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            "claude-3-sonnet-20240229",
            "claude-3-haiku-20240307",
            "claude-3-opus-20240229"
        ]
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, –ø—Ä–æ–±—É–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
        if model_name:
            if model_name not in models_to_try:
                models_to_try.insert(0, model_name)
            else:
                # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                models_to_try.remove(model_name)
                models_to_try.insert(0, model_name)
    
    api_key = st.session_state.api_key_anthropic
    
    if not api_key:
        return {"error": "API –∫–ª—é—á Anthropic –Ω–µ –∑–∞–¥–∞–Ω", "response": None, "model": None}
    
    headers = {
        "x-api-key": api_key,
        "anthropic-version": "2023-06-01",
        "content-type": "application/json"
    }
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debug_info = {
        "system_prompt": system_prompt,
        "user_text": text
    }
    
    for model in models_to_try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        max_retries = 5
        base_delay = 1  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        retry_count = 0
        
        while retry_count <= max_retries:
            try:
                debug_info["model"] = model
                
                payload = {
                    "model": model,
                    "max_tokens": 1024,
                    "temperature": 0,
                    "system": system_prompt,
                    "messages": [
                        {
                            "role": "user",
                            "content": text
                        }
                    ]
                }
                
                debug_info["payload"] = payload
                
                response = requests.post(
                    "https://api.anthropic.com/v1/messages",
                    headers=headers,
                    json=payload
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å
                    successful_claude_model = model
                    st.session_state['last_successful_model'] = model
                    
                    return {
                        "response": result["content"][0]["text"],
                        "error": None,
                        "model": model,
                        "debug_info": debug_info
                    }
                elif response.status_code == 529:  # Overloaded
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å —É—á–µ—Ç–æ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–≥—Ä–æ–∑–æ–≤—ã—Ö –≤—Å–ø—ã—à–µ–∫"
                    delay = (base_delay * (2 ** retry_count)) + (random.randint(0, 1000) / 1000.0)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                    if delay > 60:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 60 —Å–µ–∫—É–Ω–¥
                        delay = 60
                    
                    error_info = f"API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (–∫–æ–¥ 529). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay:.2f} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count+1}/{max_retries+1})"
                    print(error_info)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    retry_placeholder = st.empty()
                    retry_placeholder.warning(f"üîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count+1}/{max_retries+1})...")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    if retry_count < max_retries:
                        time.sleep(delay)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        retry_placeholder.empty()  # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                        retry_count += 1
                    else:
                        # –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
                        retry_placeholder.error(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ {max_retries+1} –ø–æ–ø—ã—Ç–æ–∫. –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å...")
                        error_info = f"–û—à–∏–±–∫–∞ API (529): –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ {max_retries+1} –ø–æ–ø—ã—Ç–æ–∫"
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model}: {error_info}")
                        break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏
                else:
                    error_info = f"–û—à–∏–±–∫–∞ API ({response.status_code}): {response.text}"
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model}: {error_info}")
                    break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
            except Exception as e:
                error_info = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
                print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model}: {error_info}")
                break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    return {
        "response": None,
        "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.",
        "model": None,
        "debug_info": debug_info
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ API
def process_image(image, context=""):
    if image is None:
        return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", None
    
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        buffer = io.BytesIO()
        image.save(buffer, format="PNG")
        image_bytes = buffer.getvalue()
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        message_content = [
            {
                "type": "image",
                "source": {
                    "type": "base64",
                    "media_type": "image/png",
                    "data": base64_image
                }
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        if context and context.strip():
            message_content.append({
                "type": "text",
                "text": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {context}"
            })
            
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = {
            "system_prompt": st.session_state.system_prompts["photo_translation"],
            "has_context": bool(context and context.strip())
        }
        
        # –í—ã–∑—ã–≤–∞–µ–º API
        result = call_anthropic_api_directly(
            text=message_content,
            system_prompt=st.session_state.system_prompts["photo_translation"]
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if result.get("error"):
            debug_info["error"] = result["error"]
            return f"–û—à–∏–±–∫–∞ API: {result['error']}", debug_info
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        translated_text = result["response"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info["model_used"] = result["model"]
        
        return translated_text, debug_info
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        return error_msg, {"error": error_msg}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ AI
def translate_text(text, from_lang, to_lang):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    if not text or text.strip() == "":
        return "", None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    debug_info = {}

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    if from_lang == 'es' and to_lang == 'ru':
        direction_key = 'es_to_ru'
        system_prompt = st.session_state.system_prompts["es_to_ru"]
    elif from_lang == 'ru' and to_lang == 'es':
        direction_key = 'ru_to_es'
        system_prompt = st.session_state.system_prompts["ru_to_es"]
        use_multiple_variants = st.session_state.use_multiple_variants
    else:
        return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {from_lang} -> {to_lang}", None

    debug_info["direction"] = direction_key
    debug_info["system_prompt"] = system_prompt
    debug_info["input_text"] = text
    if from_lang == 'ru' and to_lang == 'es':
        debug_info["multiple_variants"] = use_multiple_variants
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    if from_lang == 'es' and to_lang == 'ru':
        # –î–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ-—Ä—É—Å—Å–∫–æ–≥–æ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
        formatted_text = f'''–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç (–∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–π –≤ –∫–∞–≤—ã—á–∫–∏): "{text.strip()}"

–í–ê–ñ–ù–û: –≠—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¢–û–õ–¨–ö–û —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.
–ù–ï –î–û–ë–ê–í–õ–Ø–ô –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–∞ 
–æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.'''
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_text = f'–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç (–∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–π –≤ –∫–∞–≤—ã—á–∫–∏): "{text.strip()}"'
    
    debug_info["formatted_text"] = formatted_text
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    if st.session_state.ai_model == "Claude 3.7 Sonnet":
        try:
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API Anthropic
            result = call_anthropic_api_directly(formatted_text, system_prompt)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if result.get("error"):
                debug_info["error"] = result["error"]
                return f"–û—à–∏–±–∫–∞ API: {result['error']}", debug_info
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            translated_text = result["response"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debug_info["model_used"] = result["model"]
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∏–º–∏
            if translated_text and translated_text.startswith('"') and translated_text.endswith('"'):
                translated_text = translated_text[1:-1]
                
            return translated_text, debug_info
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}"
            debug_info["error"] = error_msg
            return error_msg, debug_info
            
    # –î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
    else:
        return f"–ú–æ–¥–µ–ª—å {st.session_state.ai_model} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", debug_info

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Elevenlabs —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API-–∑–∞–ø—Ä–æ—Å
def text_to_speech(text):
    if not text:
        st.warning("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è")
        return
    
    api_key = st.session_state.api_key_elevenlabs
    if not api_key:
        st.error("–î–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á ElevenLabs. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    voice_id = st.session_state.voice_id
    
    try:
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": api_key
        }
        
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.5
            }
        }
        
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ..."):
            response = requests.post(url, json=data, headers=headers)
            
            if response.status_code == 200:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmpfile:
                    tmpfile.write(response.content)
                    audio_path = tmpfile.name
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä
                st.audio(audio_path)
                
                return audio_path
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏: {response.status_code}, {response.text}")
                return None
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def display_es_to_ru():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'es_to_ru_text' not in st.session_state:
        st.session_state.es_to_ru_text = ""
    if 'es_to_ru_translation' not in st.session_state:
        st.session_state.es_to_ru_translation = None
    if 'es_to_ru_debug_info' not in st.session_state:
        st.session_state.es_to_ru_debug_info = None
    if 'es_to_ru_parsed_variants' not in st.session_state:
        st.session_state.es_to_ru_parsed_variants = None
    if 'test_extra_info_result' not in st.session_state:
        st.session_state.test_extra_info_result = None
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
    spanish_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º", height=150, key="es_ru_input", 
                              value=st.session_state.es_to_ru_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ session_state
    st.session_state.es_to_ru_text = spanish_text
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    translate_button = st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", use_container_width=True, key="translate_es_ru")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    if spanish_text and translate_button:
        with st.spinner("–ü–µ—Ä–µ–≤–æ–¥..."):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –µ–¥–∏–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            translation, debug_info = translate_text(spanish_text, 'es', 'ru')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
            st.session_state.es_to_ru_translation = translation
            st.session_state.es_to_ru_debug_info = debug_info
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
            parsed_variants = parse_translation_variants(translation)
            st.session_state.es_to_ru_parsed_variants = parsed_variants
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑—ã
    if st.session_state.es_to_ru_parsed_variants and len(st.session_state.es_to_ru_parsed_variants) > 0:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑—ã/—Å–ª–æ–≤–∞
        display_structured_translation(st.session_state.es_to_ru_parsed_variants, direction="es_to_ru")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API-–∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        with st.expander("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"):
            st.info("–≠—Ç–∞ —Å–µ–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            
            # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            variant_options = [f"{v['text']} ({v['explanation']})" for v in st.session_state.es_to_ru_parsed_variants]
            selected_variant_index = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
                                                 range(len(variant_options)), 
                                                 format_func=lambda i: variant_options[i])
            
            if st.button("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", key="test_extra_info"):
                selected_variant = st.session_state.es_to_ru_parsed_variants[selected_variant_index]
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..."):
                    details, examples, debug_info = get_translation_details(
                        selected_variant['text'], 
                        selected_variant['explanation']
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
                    st.session_state.test_extra_info_result = {
                        "variant": selected_variant,
                        "details": details,
                        "examples": examples,
                        "debug_info": debug_info
                    }
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if st.session_state.test_extra_info_result:
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                
                test_result = st.session_state.test_extra_info_result
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏
                if test_result["details"]:
                    st.markdown("##### –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    st.markdown(test_result["details"])
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                if test_result["examples"]:
                    st.markdown("##### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                    st.markdown(test_result["examples"])
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                st.markdown("##### –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                st.json(test_result["debug_info"])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    elif st.session_state.es_to_ru_translation:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_container = st.container()
        
        with result_container:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.markdown(f"""
            <div class="translation-result">
                {st.session_state.es_to_ru_translation}
            </div>
            """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.es_to_ru_translation:
        if st.button("üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", key="new_translation_es_ru"):
            st.session_state.es_to_ru_translation = None
            st.session_state.es_to_ru_debug_info = None
            st.session_state.es_to_ru_parsed_variants = None
            st.session_state.test_extra_info_result = None
            st.session_state.es_to_ru_text = ""  # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            st.rerun()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í –ö–û–ù–¶–ï
    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False, key="show_debug_es_ru")
        
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if show_debug and st.session_state.es_to_ru_debug_info:
        st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ —Å–æ—Å—Ç–∞–≤–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
        if st.session_state.es_to_ru_parsed_variants:
            variants_info = []
            for i, variant in enumerate(st.session_state.es_to_ru_parsed_variants):
                variant_info = {
                    "–Ω–æ–º–µ—Ä": i+1,
                    "—Ç–µ–∫—Å—Ç": variant.get('text', ''),
                    "–ø–æ—è—Å–Ω–µ–Ω–∏–µ": variant.get('explanation', ''),
                    "–∑–∞–≥—Ä—É–∂–µ–Ω—ã_–¥–µ—Ç–∞–ª–∏": variant.get('details_loaded', False),
                    "–¥–ª–∏–Ω–∞_–¥–µ—Ç–∞–ª–µ–π": len(variant.get('details', '')),
                    "–¥–ª–∏–Ω–∞_–ø—Ä–∏–º–µ—Ä–æ–≤": len(variant.get('examples', '')),
                    "–∫–ª—é—á–∏": list(variant.keys())
                }
                variants_info.append(variant_info)
            
            st.session_state.es_to_ru_debug_info["variants_info"] = variants_info
        
        st.json(st.session_state.es_to_ru_debug_info)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π
def display_ru_to_es():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'ru_to_es_text' not in st.session_state:
        st.session_state.ru_to_es_text = ""
    if 'ru_to_es_translation' not in st.session_state:
        st.session_state.ru_to_es_translation = None
    if 'ru_to_es_debug_info' not in st.session_state:
        st.session_state.ru_to_es_debug_info = None
    if 'ru_to_es_parsed_variants' not in st.session_state:
        st.session_state.ru_to_es_parsed_variants = None
    if 'use_multiple_variants' not in st.session_state:
        st.session_state.use_multiple_variants = True
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    russian_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º", height=150, key="ru_es_input", 
                               value=st.session_state.ru_to_es_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ session_state
    st.session_state.ru_to_es_text = russian_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
    previous_value = st.session_state.use_multiple_variants
    st.session_state.use_multiple_variants = st.checkbox(
        "–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤", 
        value=st.session_state.use_multiple_variants,
        help="–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ, —Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )
    
    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
    if previous_value != st.session_state.use_multiple_variants:
        if st.session_state.use_multiple_variants:
            st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_several_options"]
        else:
            st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_one_option"]
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª–µ
        save_prompt_to_file(PROMPT_FILES["ru_to_es"], st.session_state.system_prompts["ru_to_es"])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    translate_button = st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", use_container_width=True, key="translate_ru_es")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    if russian_text and translate_button:
        with st.spinner("–ü–µ—Ä–µ–≤–æ–¥..."):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if st.session_state.use_multiple_variants:
                st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_several_options"]
            else:
                st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_one_option"]
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            translation, debug_info = translate_text(russian_text, 'ru', 'es')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
            st.session_state.ru_to_es_translation = translation
            st.session_state.ru_to_es_debug_info = debug_info
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
            parsed_variants = parse_translation_variants(translation)
            st.session_state.ru_to_es_parsed_variants = parsed_variants
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑—ã
    if st.session_state.ru_to_es_parsed_variants and len(st.session_state.ru_to_es_parsed_variants) > 0:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑—ã/—Å–ª–æ–≤–∞
        display_structured_translation(st.session_state.ru_to_es_parsed_variants, direction="ru_to_es")
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    elif st.session_state.ru_to_es_translation:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        result_container = st.container()
        
        with result_container:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–Ω–∞—á–∞–ª–∞
            st.markdown(f"""
            <div class="translation-result">
                {st.session_state.ru_to_es_translation}
            </div>
            """, unsafe_allow_html=True)
            
            # –ë–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–û–î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            action_cols = st.columns([7, 1, 1])
            with action_cols[1]:
                st.button("üìã", key="copy_ru_es_inside", help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
            with action_cols[2]:
                if st.button("üîä", key="speak_ru_es_inside", help="–û–∑–≤—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"):
                    text_to_speech(st.session_state.ru_to_es_translation)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.ru_to_es_translation:
        if st.button("üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", key="new_translation_ru_es"):
            st.session_state.ru_to_es_translation = None
            st.session_state.ru_to_es_debug_info = None
            st.session_state.ru_to_es_parsed_variants = None
            st.session_state.ru_to_es_text = ""  # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            st.rerun()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í –ö–û–ù–¶–ï
    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False, key="show_debug_ru_es")
        
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if show_debug and st.session_state.ru_to_es_debug_info:
        st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        st.json(st.session_state.ru_to_es_debug_info)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
def parse_translation_variants(translation_text):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
    —Å –∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    if not translation_text:
        return []
    
    variants = []
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
    import re
    
    # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    variant_pattern = re.compile(r'```–≤–∞—Ä–∏–∞–Ω—Ç-(\d+)\n(.*?)```', re.DOTALL)
    explanation_pattern = re.compile(r'```–ø–æ—è—Å–Ω–µ–Ω–∏–µ-(\d+)\n(.*?)```', re.DOTALL)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if '```–≤–∞—Ä–∏–∞–Ω—Ç-' not in translation_text:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        return []
    
    # –ò—â–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
    variant_matches = variant_pattern.findall(translation_text)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Ä–∞–∑–º–µ—Ç–∫–µ - –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not variant_matches:
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è
    explanation_matches = {num: text.strip() for num, text in explanation_pattern.findall(translation_text)}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    for num, text in variant_matches:
        variant = {
            "number": num,
            "text": text.strip(),
            "explanation": explanation_matches.get(num, ""),
            "details_loaded": False  # –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        }
        variants.append(variant)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ API")
    
    return variants

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
def display_structured_translation(variants, direction="es_to_ru"):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.
    –ö–Ω–æ–ø–∫–∞ "–ï—â—ë" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä—è–º–æ –ø–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º.
    
    Parameters:
        variants: —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
        direction: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ ("es_to_ru" –∏–ª–∏ "ru_to_es")
    """
    # –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
    st.markdown("""
    <style>
    .variant-item {
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
    }
    .variant-translation {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 5px;
    }
    .variant-explanation {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 5px;
    }
    .details-container {
        border-left: 2px solid #ddd;
        padding-left: 10px;
        margin: 5px 0;
    }
    .example-translation {
        color: #666;
        font-style: italic;
        margin-bottom: 5px;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â—ë" */
    .more-btn {
        margin-top: 5px !important;
        margin-bottom: 5px !important;
        padding: 0.25rem !important;
        height: auto !important;
        background-color: #f0f2f6 !important;
        color: #444 !important;
        border: none !important;
        border-radius: 4px !important;
        font-size: 0.8rem !important;
    }
    
    .more-btn:hover {
        background-color: #e0e2e6 !important;
        color: #222 !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media only screen and (max-width: 768px) {
        .more-btn {
            width: 100% !important;
        }
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown(f"### –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ ({len(variants)})")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session_state –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if 'shown_details' not in st.session_state:
        st.session_state.shown_details = {}
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    for i, variant in enumerate(variants):
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        variant_key = f"variant_{variant['number']}_{i}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        variant_container = st.container()
        
        with variant_container:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
            st.markdown(f"""
            <div class="variant-item">
                <div class="variant-translation">{variant['text']}</div>
                <div class="variant-explanation">{variant['explanation']}</div>
            """, unsafe_allow_html=True)
            
            # –î–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ-—Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if direction == "es_to_ru":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑–∞–Ω—ã –ª–∏ —É–∂–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                if variant_key in st.session_state.shown_details:
                    # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    details = st.session_state.shown_details[variant_key].get('details', '')
                    examples = st.session_state.shown_details[variant_key].get('examples', '')
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–µ—Ç–∞–ª—è–º–∏
                    st.markdown('<div class="details-container">', unsafe_allow_html=True)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if details:
                        st.markdown("#### –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                        st.markdown(details)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if examples:
                        st.markdown("#### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
                        example_lines = examples.strip().split('\n')
                        
                        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
                        example_lines = [line[2:] if line.startswith('- ') else line for line in example_lines if line.strip()]
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ø–∞—Ä–Ω–æ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ + –ø–µ—Ä–µ–≤–æ–¥)
                        example_index = 0
                        while example_index < len(example_lines):
                            if example_index + 1 < len(example_lines):
                                example = example_lines[example_index]
                                translation = example_lines[example_index + 1]
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º markdown –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
                                st.markdown(example)
                                
                                # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                                st.markdown(f"<div class='example-translation'>{translation}</div>", unsafe_allow_html=True)
                                
                                example_index += 2
                            else:
                                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–∞—Ä—ã
                                st.markdown(example_lines[example_index])
                                example_index += 1
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ—Ç–∞–ª–µ–π
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    if st.button("–°–∫—Ä—ã—Ç—å", key=f"hide_{variant_key}", help="–°–∫—Ä—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", use_container_width=True, 
                                type="secondary", args=None, kwargs=None, disabled=False):
                        # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
                        del st.session_state.shown_details[variant_key]
                        st.rerun()
                else:
                    # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ï—â—ë"
                    more_key = f"more_{variant_key}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É "–ï—â—ë"
                    if st.button("–ï—â—ë", key=more_key, help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", use_container_width=True, 
                                type="secondary", args=None, kwargs=None, disabled=False):
                        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..."):
                            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã
                            details, examples, debug_info = get_translation_details(
                                variant['text'], 
                                variant['explanation']
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
                            st.session_state.shown_details[variant_key] = {
                                'details': details,
                                'examples': examples,
                                'debug_info': debug_info
                            }
                            
                            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                            st.rerun()
            
            # –î–ª—è —Ä—É—Å—Å–∫–æ-–∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            if direction == "ru_to_es":
                cols = st.columns([5, 1, 1])
                with cols[1]:
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    copy_key = f"copy_{variant_key}"
                    st.button("üìã", key=copy_key, help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç")
                
                with cols[2]:
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                    speak_key = f"speak_{variant_key}" 
                    if st.button("üîä", key=speak_key, help="–û–∑–≤—É—á–∏—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç"):
                        text_to_speech(variant['text'])
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º div –≤–∞—Ä–∏–∞–Ω—Ç–∞
            st.markdown('</div>', unsafe_allow_html=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if i < len(variants) - 1:
                st.markdown('<hr style="margin: 10px 0; border: 0; height: 1px; background-color: #e0e0e0;">', unsafe_allow_html=True)
    
    # JavaScript –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—Å—Å–∫–æ-–∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if direction == "ru_to_es":
        st.markdown("""
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            function setupCopyButtons() {
                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                const copyButtons = document.querySelectorAll('button[data-testid*="copy_variant_"]');
                copyButtons.forEach(button => {
                    if (!button.hasAttribute('data-copy-listener')) {
                        button.setAttribute('data-copy-listener', 'true');
                        button.addEventListener('click', function() {
                            // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
                            const variantContainer = this.closest('.variant-item');
                            if (variantContainer) {
                                // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
                                const translationElement = variantContainer.querySelector('.variant-translation');
                                if (translationElement) {
                                    const text = translationElement.textContent.trim();
                                    
                                    navigator.clipboard.writeText(text)
                                        .then(() => {
                                            Toastify({
                                                text: "–í–∞—Ä–∏–∞–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!",
                                                duration: 2000,
                                                close: false,
                                                gravity: "bottom",
                                                position: "center",
                                                stopOnFocus: true,
                                                style: {
                                                    background: "linear-gradient(to right, #00b09b, #96c93d)",
                                                }
                                            }).showToast();
                                        })
                                        .catch(err => {
                                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ", err);
                                        });
                                }
                            }
                        });
                    }
                });
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            setupCopyButtons();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes.length) {
                        setupCopyButtons();
                    }
                });
            });
            
            // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
            observer.observe(document.body, { childList: true, subtree: true });
        });
        </script>
        """, unsafe_allow_html=True)
        
    # –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ï—â—ë"
    st.markdown("""
    <style>
    /* –°—Ç–∏–ª–∏–∑—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë" */
    button[data-testid*="more_variant_"] {
        margin-top: 5px !important;
        margin-bottom: 5px !important;
        padding: 0.25rem !important;
        height: auto !important;
        background-color: #f0f2f6 !important;
        color: #444 !important;
        border: none !important;
        border-radius: 4px !important;
        font-size: 0.8rem !important;
    }
    
    button[data-testid*="more_variant_"]:hover {
        background-color: #e0e2e6 !important;
        color: #222 !important;
    }
    
    /* –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É */
    @media only screen and (max-width: 768px) {
        button[data-testid*="more_variant_"], button[data-testid*="hide_variant_"] {
            width: 100% !important;
        }
    }
    </style>
    """, unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞
def display_photo_translation():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'photo_context' not in st.session_state:
        st.session_state.photo_context = ""
    if 'photo_translation' not in st.session_state:
        st.session_state.photo_translation = None
    if 'photo_debug_info' not in st.session_state:
        st.session_state.photo_debug_info = None
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å–ø–∞–Ω—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º", type=["png", "jpg", "jpeg"], key="photo_upload")
    
    # –ü–æ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = st.text_area("–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=st.session_state.photo_context, 
                           key="photo_context_input", help="–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤ –ø–µ—Ä–µ–≤–æ–¥–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    st.session_state.photo_context = context
    
    if image:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_pil = Image.open(image)
        st.image(image_pil, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        translate_button = st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", use_container_width=True, key="translate_photo")
        
        if translate_button:
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                translation, debug_info = process_image(image_pil, context)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                st.session_state.photo_translation = translation
                st.session_state.photo_debug_info = debug_info
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ session_state
    if st.session_state.photo_translation:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        result_container = st.container()
        
        with result_container:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–Ω–∞—á–∞–ª–∞
            st.markdown(f"""
            <div class="translation-result">
                {st.session_state.photo_translation}
            </div>
            """, unsafe_allow_html=True)
            
            # –ë–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–û–î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            action_cols = st.columns([8, 1])
            with action_cols[1]:
                st.button("üìã", key="copy_photo_inside", help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", key="new_translation_photo"):
            st.session_state.photo_translation = None
            st.session_state.photo_debug_info = None
            st.session_state.photo_context = ""  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            st.rerun()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í –ö–û–ù–¶–ï
    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False, key="show_debug_photo")
        
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if show_debug and st.session_state.photo_debug_info:
        st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        st.json(st.session_state.photo_debug_info)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def display_settings():
    global successful_claude_model
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    if successful_claude_model:
        st.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {successful_claude_model}")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI
    st.session_state.ai_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        ["Claude 3.7 Sonnet", "ChatGPT gpt-4o", "ChatGPT o1"],
        index=["Claude 3.7 Sonnet", "ChatGPT gpt-4o", "ChatGPT o1"].index(st.session_state.ai_model)
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ Claude
    if st.session_state.ai_model == "Claude 3.7 Sonnet":
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ Claude")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if successful_claude_model:
            st.success(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å Claude: {successful_claude_model}")
        
        # –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –º–æ–¥–µ–ª–∏
        st.session_state.use_last_successful_model = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å",
            value=st.session_state.get('use_last_successful_model', False)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å
        last_successful = st.session_state.get('last_successful_model', None)
        if last_successful:
            st.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è –º–æ–¥–µ–ª—å: {last_successful}")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"):
            st.session_state['last_successful_model'] = None
            successful_claude_model = None
            st.success("–ö—ç—à –º–æ–¥–µ–ª–∏ –æ—á–∏—â–µ–Ω")
            st.rerun()
    
    # –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞")
    st.session_state.voice_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:",
        [
            "Jhenny Antiques (–∂–µ–Ω—Å–∫–∏–π)", 
            "Benjamin (–º—É–∂—Å–∫–æ–π)"
        ],
        index=0 if st.session_state.voice_id == "2Lb1en5ujrODDIqmp7F3" else 1
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ voice_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
    if st.session_state.voice_id == "Jhenny Antiques (–∂–µ–Ω—Å–∫–∏–π)":
        st.session_state.voice_id = "2Lb1en5ujrODDIqmp7F3"
    elif st.session_state.voice_id == "Benjamin (–º—É–∂—Å–∫–æ–π)":
        st.session_state.voice_id = "LruHrtVF6PSyGItzMNHS"
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    st.subheader("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã")
    
    st.info("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    
    with st.expander("–ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"):
        es_to_ru_prompt = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:", 
            st.session_state.system_prompts["es_to_ru"],
            height=300,
            key="es_to_ru_prompt"
        )
    
    with st.expander("–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π (–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)"):
        ru_to_es_one_option_prompt = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π (–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç):", 
            st.session_state.system_prompts["ru_to_es_one_option"],
            height=200,
            key="ru_to_es_one_option_prompt"
        )
    
    with st.expander("–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)"):
        ru_to_es_several_options_prompt = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤):", 
            st.session_state.system_prompts["ru_to_es_several_options"],
            height=200,
            key="ru_to_es_several_options_prompt"
        )
    
    with st.expander("–ü–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞"):
        photo_translation_prompt = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", 
            st.session_state.system_prompts["photo_translation"],
            height=300,
            key="photo_translation_prompt"
        )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –≤ —Ñ–∞–π–ª—ã
        success_es_to_ru = save_prompt_to_file(PROMPT_FILES["es_to_ru"], es_to_ru_prompt)
        success_ru_to_es_one = save_prompt_to_file(PROMPT_FILES["ru_to_es_one_option"], ru_to_es_one_option_prompt)
        success_ru_to_es_several = save_prompt_to_file(PROMPT_FILES["ru_to_es_several_options"], ru_to_es_several_options_prompt)
        success_photo = save_prompt_to_file(PROMPT_FILES["photo_translation"], photo_translation_prompt)
        
        if success_es_to_ru and success_ru_to_es_one and success_ru_to_es_several and success_photo:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –≤ session_state
            st.session_state.system_prompts["es_to_ru"] = es_to_ru_prompt
            st.session_state.system_prompts["ru_to_es_one_option"] = ru_to_es_one_option_prompt
            st.session_state.system_prompts["ru_to_es_several_options"] = ru_to_es_several_options_prompt
            st.session_state.system_prompts["photo_translation"] = photo_translation_prompt
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if st.session_state.use_multiple_variants:
                st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_several_options"]
            else:
                st.session_state.system_prompts["ru_to_es"] = st.session_state.system_prompts["ru_to_es_one_option"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
            save_prompt_to_file(PROMPT_FILES["ru_to_es"], st.session_state.system_prompts["ru_to_es"])
            
            st.success("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!")
        else:
            st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í –ö–û–ù–¶–ï
    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False, key="show_debug_settings")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if show_debug:
        debug_info = {
            "use_multiple_variants": st.session_state.use_multiple_variants,
            "current_ru_to_es_prompt_type": "several_options" if st.session_state.use_multiple_variants else "one_option",
            "prompt_files": PROMPT_FILES,
            "prompt_file_lengths": {
                key: len(st.session_state.system_prompts.get(key, "")) for key in st.session_state.system_prompts
            }
        }
        
        st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:")
        st.json(debug_info)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞
def get_translation_details(word, explanation):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    
    Parameters:
        word (str): –°–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
        explanation (str): –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Å–ª–æ–≤—É –∏–ª–∏ —Ñ—Ä–∞–∑–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        tuple: (–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –ø—Ä–∏–º–µ—Ä—ã, –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    """
    if not word:
        return "", "", {"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    debug_info = {}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    system_prompt = st.session_state.system_prompts["es_to_ru_extra"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è, —á—Ç–æ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    formatted_text = f'''–≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¢–û–õ–¨–ö–û –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞.
–°–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞: "{word}"
–ö—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ: "{explanation}"

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.
'''
    
    debug_info["word"] = word
    debug_info["explanation"] = explanation
    debug_info["system_prompt"] = system_prompt
    debug_info["formatted_text"] = formatted_text
    
    try:
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API Anthropic
        result = call_anthropic_api_directly(formatted_text, system_prompt)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if result.get("error"):
            debug_info["error"] = result["error"]
            return "", "", debug_info
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
        response_text = result["response"]
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
        import re
        details_pattern = re.compile(r'```–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏\n(.*?)```', re.DOTALL)
        examples_pattern = re.compile(r'```–ø—Ä–∏–º–µ—Ä—ã\n(.*?)```', re.DOTALL)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        details_match = details_pattern.search(response_text)
        examples_match = examples_pattern.search(response_text)
        
        details = details_match.group(1).strip() if details_match else ""
        examples = examples_match.group(1).strip() if examples_match else ""
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ç–∫—É, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
        if not details and not examples and response_text.strip():
            details = response_text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info["model_used"] = result["model"]
        debug_info["response"] = response_text
        
        # –õ–æ–≥–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{word}': {len(details)} —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, {len(examples)} —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        return details, examples, debug_info
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
        debug_info["error"] = error_msg
        return "", "", debug_info

# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
    if not st.session_state.api_key_anthropic and st.session_state.ai_model == "Claude 3.7 Sonnet":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ Anthropic –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
        st.markdown("""
        <div style="padding: 20px; border: 1px solid #f0f2f6; border-radius: 5px; margin-bottom: 20px;">
            <h2>AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ | –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API</h2>
            <p style="color: #ff4b4b; margin-bottom: 15px;">API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:</p>
        </div>
        """, unsafe_allow_html=True)
        
        api_key = st.text_input("API –∫–ª—é—á Anthropic", type="password")
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á", use_container_width=True):
            if api_key:
                st.session_state.api_key_anthropic = api_key
                st.success("API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                time.sleep(1)
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞
        with st.expander("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Anthropic"):
            st.markdown("""
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç [Anthropic](https://console.anthropic.com/)
            2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
            3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª API Keys
            4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á
            5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ
            """)
        
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    with st.sidebar:
        st.title("AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        mode = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            ["üá™üá∏ ‚Üí üá∑üá∫", 
             "üá∑üá∫ ‚Üí üá™üá∏", 
             "üì∑ –§–æ—Ç–æ",
             "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        if mode == "üá™üá∏ ‚Üí üá∑üá∫":
            st.session_state.current_screen = "es_to_ru"
        elif mode == "üá∑üá∫ ‚Üí üá™üá∏":
            st.session_state.current_screen = "ru_to_es"
        elif mode == "üì∑ –§–æ—Ç–æ":
            st.session_state.current_screen = "photo"
        elif mode == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            st.session_state.current_screen = "settings"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    mode_indicator_text = ""
    if st.session_state.get('current_screen', 'es_to_ru') == "es_to_ru":
        mode_indicator_text = "üá™üá∏ ‚Üí üá∑üá∫"
    elif st.session_state.get('current_screen', '') == "ru_to_es":
        mode_indicator_text = "üá∑üá∫ ‚Üí üá™üá∏"
    elif st.session_state.get('current_screen', '') == "photo":
        mode_indicator_text = "üì∑ –§–æ—Ç–æ"
    elif st.session_state.get('current_screen', '') == "settings":
        mode_indicator_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
    st.markdown(f"""
    <div class="mode-indicator">
        {mode_indicator_text}
    </div>
    """, unsafe_allow_html=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if st.session_state.get('current_screen', 'es_to_ru') == "es_to_ru":
        display_es_to_ru()
    elif st.session_state.get('current_screen', '') == "ru_to_es":
        display_ru_to_es()
    elif st.session_state.get('current_screen', '') == "photo":
        display_photo_translation()
    elif st.session_state.get('current_screen', '') == "settings":
        display_settings()

if __name__ == "__main__":
    main() 